name: Apply Infrastructure

on:
  push:
    branches:
      - main
      - producao
      - teste
  pull_request:
    branches:
      - main
      - producao
      - teste

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest

    steps:
      # 1. Baixar o repositório
      - name: 'Checkout repository'
        uses: actions/checkout@v2

      # 2. Configurar o Terraform
      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.11

      # 3. Configurar Credenciais da AWS
      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 4. Inicializar Terraform
      - name: 'Terraform Init'
        working-directory: ./terraform
        run: terraform init

      # 5. Importar recursos existentes
      - name: 'Terraform Import Resources'
        working-directory: ./terraform
        run: |
          terraform import aws_dynamodb_table.file_metadata_table file_metadata || true
          terraform import aws_iam_role.lambda_role lambda_execution_role || true
          terraform import aws_s3_bucket.file_bucket ada-contabilidade-storage || true

      # 6. Aplicar configurações do Terraform
      - name: 'Terraform Apply'
        working-directory: ./terraform
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}   # Certifique-se de que DB_PASSWORD está correto aqui
        run: terraform apply -auto-approve
